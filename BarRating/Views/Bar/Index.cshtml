
@using Microsoft.AspNetCore.Identity
@model BarRating.Models.Bar.BarsViewModel

@{
    ViewData["Title"] = "Bars";
}

@Html.AntiForgeryToken()

<div class="container mt-5">
    <h2 class="text-center mb-4">Discover Bars</h2>

    <form asp-controller="Bar" asp-action="Search" method="get" class="mb-4 d-flex justify-content-center">
        <input type="text"
               name="searchQuery"
               value="@ViewData["CurrentFilter"]"
               class="form-control w-50"
               placeholder="Search bars..." />
        <button type="submit" class="btn btn-primary ms-2">Search</button>
    </form>

    @if (User.IsInRole("Admin"))
    {
        <div class="text-end mb-3">
            <a asp-controller="Bar" asp-action="Create" class="btn btn-success">Create New Bar</a>
        </div>
    }

    <div class="row g-4">
        @if (Model.Bars != null && Model.Bars.Count > 0)
        {
            foreach (var bar in Model.Bars)
            {
                <div class="col-md-4">
                    <div class="card h-100 shadow-sm border-0" style="transition: transform 0.2s, box-shadow 0.2s;">
                        <div style="position: relative; height: 200px; overflow: hidden;">
                            <img src="@bar.Image"
                                 class="card-img-top w-100 h-100"
                                 alt="@bar.Name"
                                 style="object-fit: cover;" />
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@bar.Name</h5>
                            <p class="card-text text-muted">@bar.Description</p>

                            @if (bar.BarType != BarRating.Data.Enums.BarType.None)
                            {
                                <p class="text-muted"><small>@Html.DisplayFor(modelItem => bar.BarType)</small></p>
                            }

                            @if (bar.PriceCategory != BarRating.Data.Enums.PriceCategory.None)
                            {
                                <span class="badge bg-primary mb-2">@bar.PriceCategory</span>
                            }

                            <p class="mb-1">
                                <strong>Rating:</strong> (@bar.AverageRating.ToString("0.0"))
                            </p>
                            @{
                                double rating = bar.AverageRating;
                                int fullStars = (int)Math.Floor(rating);
                                bool hasHalfStar = (rating - fullStars) >= 0.25;
                                int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
                            }
                            <div class="mb-2">
                                @for (int i = 0; i < fullStars; i++)
                                {
                                    <span class="text-warning">&#9733;</span>
                                }
                                @if (hasHalfStar)
                                {
                                    <span class="text-warning" style="opacity: 0.6;">&#9733;</span>
                                }
                                @for (int i = 0; i < emptyStars; i++)
                                {
                                    <span class="text-secondary">&#9734;</span>
                                }
                                <small class="text-muted ms-1">(@bar.ReviewsCount) Reviews</small>
                            </div>

                            @if (bar.IsVerified)
                            {
                                <span class="badge bg-success">
                                    <i class="bi bi-patch-check"></i> Verified
                                </span>
                            }
                        </div>

                        <div class="card-footer d-flex justify-content-between">
                            <a asp-controller="Bar" asp-action="Specify" asp-route-barId="@bar.BarId" class="btn btn-info btn-sm">View Details</a>

                            @if (User.Identity.IsAuthenticated)
                            {
                                <button type="button"
                                        class="btn @(bar.IsSaved ? "btn-danger" : "btn-outline-danger") btn-sm"
                                        id="saveButton-@bar.BarId"
                                        onclick="toggleSave(@bar.BarId, this)">
                                    @(bar.IsSaved ? "❤️" : "♡")
                                </button>
                            }

                            @if (User.IsInRole("Admin"))
                            {
                                <div>
                                    <a asp-controller="Bar" asp-action="Edit" asp-route-barId="@bar.BarId" class="btn btn-warning btn-sm me-1">Edit</a>
                                    <a asp-controller="Bar" asp-action="Delete" asp-route-barId="@bar.BarId" class="btn btn-danger btn-sm">Delete</a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center">
                <p class="lead text-muted">No bars found.</p>
            </div>
        }
    </div>
</div>

<style>
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }
</style>

@section Scripts {
    <script>
        async function toggleSave(barId, button) {
            console.log("barId from view:", barId);
            const response = await fetch('@Url.Action("SavedBar", "SavedBar")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ barId: barId })
            });

            const result = await response.json();

            if (result.success) {
                if (result.isSaved) {
                    button.textContent = '❤️';
                    button.classList.remove('btn-outline-danger');
                    button.classList.add('btn-danger');
                } else {
                    button.textContent = '♡';
                    button.classList.remove('btn-danger');
                    button.classList.add('btn-outline-danger');
                }

                showToast(result.message);
            } else {
                alert(result.message);
            }
        }

        function showToast(message) {
            const toast = document.createElement('div');
            toast.className = 'toast bg-success text-white border-0';
            toast.style = 'position: fixed; top: 20px; right: 20px; z-index: 1055;';
            toast.innerHTML = `
                        <div class="d-flex">
                            <div class="toast-body">${message}</div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                        </div>`;
            document.body.appendChild(toast);
            const bootstrapToast = new bootstrap.Toast(toast, { autohide: true });
            bootstrapToast.show();
            setTimeout(() => toast.remove(), 3000);
        }
    </script>
}